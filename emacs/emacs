;; Define the load path
(setq load-path (cons "~/Dropbox/emacs/.emacs.d/" load-path))

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/themes/")
(require 'color-theme-oblivion)
(color-theme-oblivion)

;; Turn off the toolbar
(tool-bar-mode -1)

;; Turn off the menu bar
(menu-bar-mode -1)

;; Turn off the scrollbar
(scroll-bar-mode -1)

;; Show column number in modeline
(setq column-number-mode t)

;; Comment style
(setq comment-style 'multi-line)

;; Always flash for parens and define a more distinctive color
(show-paren-mode 1)

;; Answer y or n instead of yes or no at prompts
(defalias 'yes-or-no-p 'y-or-n-p)

;; Encoding
(setq file-name-coding-system 'utf-8)

;; Spell checking
(setq-default ispell-program-name "aspell"
  ispell-extra-args '("--sug-mode=ultra"))
(setq-default ispell-dictionary "en_US")

;; Default Web Browser
(setq browse-url-browser-function 'browse-url-chromium)

;; Save after a certain amount of time.
(setq auto-save-timeout 1800)

;; Change backup behavior to save in a specified directory
(setq backup-directory-alist '(("." . "~/Dropbox/emacs/.emacs.d/saves/"))
 backup-by-copying      t
 version-control        t
 delete-old-versions    t
 kept-new-versions      6
 kept-old-versions      2
)

;; Start scrolling when 2 lines from top/bottom
(setq scroll-margin 5)

;; Fix the scrolling on jumps between windows
(setq scroll-conservatively 5)

;; Cursor in same relative row and column during PgUP/DN
(setq scroll-preserve-screen-position t)

;; Reload or edit .emacs on the fly
;;    - key bindings defined below
;;
(defun aic-reload-dot-emacs ()
  "Reload user configuration from .emacs"
  (interactive)
  ;; Fails on killing the Messages buffer, workaround:
  (get-buffer-create "*Messages*")
  (load-file "~/.emacs")
)
(defun aic-edit-dot-emacs ()
  "Edit user configuration in .emacs"
  (interactive)
  (find-file "~/.emacs")
)

;; Kill all buffers except scratch
(defun aic-nuke-all-buffers ()
  "Kill all buffers, leaving *scratch* only."
  (interactive)
  (mapcar (lambda (x) (kill-buffer x)) (buffer-list))
  (delete-other-windows)
)

(defalias 'nuke 'aic-nuke-all-buffers)

;; Reload or edit .emacs as defined above
(global-set-key "\C-c\C-r" 'aic-reload-dot-emacs)
(global-set-key "\C-c\C-e" 'aic-edit-dot-emacs)

(require 'whitespace)
(setq whitespace-line-column 500)
(global-whitespace-mode t)

(require 'windows)
(win:startup-with-window)
(define-key ctl-x-map "C" 'see-you-again)
(require 'revive)
(autoload 'save-current-configuration "revive" "Save status" t)
(autoload 'resume "revive" "Resume Emacs" t)
(autoload 'wipe "revive" "Wipe Emacs" t)
(define-key ctl-x-map "S" 'save-current-configuration)
(define-key ctl-x-map "F" 'resume)
(define-key ctl-x-map "K" 'wipe)

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/yasnippet-0.6.1c")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/Dropbox/emacs/.emacs.d/yasnippet-0.6.1c/snippets")
(global-set-key (kbd "s-z") 'yas/expand)

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/gh.el")
(require 'gist)

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/magit")
(require 'magit)

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/auto-complete-1.3.1")
(require 'auto-complete)
(require 'go-autocomplete)
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/Dropbox/emacs/.emacs.d/auto-complete-1.3.1/dict")
(setq-default ac-sources (add-to-list 'ac-sources 'ac-source-dictionary))
(global-auto-complete-mode t)
(setq ac-auto-start 2)
(setq ac-ignore-case nil)
(add-to-list 'ac-modes 'stylus-mode)
(add-to-list 'ac-modes 'jade-mode)
(add-to-list 'ac-modes 'json-mode)
(add-to-list 'ac-modes 'sws-mode)
(add-to-list 'ac-modes 'markdown-mode)
(add-to-list 'ac-modes 'js3-mode)
(add-to-list 'ac-modes 'go-mode)
(define-key ac-complete-mode-map "\t" 'ac-complete)

(require 'autopair)
(autopair-global-mode 1)

(require 'sws-mode)
(require 'stylus-mode)
(require 'jade-mode)
(add-to-list 'auto-mode-alist '("\\.styl$" . stylus-mode))
(add-to-list 'auto-mode-alist '("\\.jade$" . jade-mode))
(add-to-list 'auto-mode-alist '("\\.haml$" . jade-mode))

(require 'json-mode)
(add-to-list 'auto-mode-alist '("\\.json$" . json-mode))

(require 'go-mode)
(add-to-list 'auto-mode-alist '("\\.go$" . go-mode))

(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

(load "~/Dropbox/emacs/.emacs.d/nxhtml/autostart.el")
(fset 'xml-mode 'nxhtml-mode)
(fset 'html-mode 'nxhtml-mode)
(add-hook 'nxml-mode-hook
          (lambda () (rng-validate-mode nil t)))

;;(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/org-mode")
(require 'org-install)
;; The following lines are always needed.  Choose your own keys.
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(global-font-lock-mode 1)                     ; for all buffers
(add-hook 'org-mode-hook 'turn-on-font-lock)  ; Org buffers only

;; Settings
(setq org-directory "~/Dropbox/Org/")
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Dropbox/Org/flagged.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/Org/MobileOrg")
;; Misc
(setq org-log-done t)
(setq org-completion-use-ido t)
(setq org-return-follows-link t)
;;(setq org-agenda-start-on-weekday 0)
(setq org-agenda-ndays 30)

;; Files that are included in org-mode agenda
(setq org-agenda-files
 (list "~/Dropbox/Org/tasks.org")
)

(setq org-combined-agenda-icalendar-file "~/Dropbox/Org/org.ics")
(org-icalendar-combine-agenda-files)
;;(org-export-icalendar-combine-agenda-files)

(require 'org-remember)
(org-remember-insinuate)
;; Notes file
(setq org-default-notes-file (concat org-directory "~/Dropbox/Org/notes.org"))
;; Notes templates
(setq org-remember-templates
 '(("Note" ?n   "* NOTE %?\n %i\n %a" "~/Dropbox/Org/notes.org" "Notes")
   ("Download" ?d "* DL %?\n %i\n %a" "~/Dropbox/Org/download.org" "Download")
   ("Music" ?m "* MUSIC %?\n %i\n %a" "~/Dropbox/Org/music.org" "Music")
   ("Idea" ?i "* %^{Title}\n %i\n %a" "~/Dropbox/Org/brainstorm.org" "Brainstorm")))

;; Remember frames
;;   - $ emacsclient -e '(make-remember-frame)'
;;
;; Org-remember splits windows, force it to a single window
(add-hook 'remember-mode-hook  'delete-other-windows)

;; Automatic closing of remember frames
(defadvice remember-finalize (after delete-remember-frame activate)
  "Advise remember-finalize to close the frame if it is the remember frame"
  (if (equal "*Remember*" (frame-parameter nil 'name))
    (delete-frame))
)
(defadvice remember-destroy (after delete-remember-frame activate)
  "Advise remember-destroy to close the frame if it is the remember frame"
  (if (equal "*Remember*" (frame-parameter nil 'name))
    (delete-frame))
)

;; Initialization of remember frames
(defun make-remember-frame ()
  "Create a new frame and run org-remember"
  (interactive)
  (make-frame '((name . "*Remember*") (width . 80) (height . 10)))
  (sleep-for 1)
  (select-frame-by-name "*Remember*")
  (org-remember)
)

;; update agenda file after changes to org files

(add-hook 'org-mode-hook
 (lambda nil
   (add-hook 'after-save-hook (lambda nil (th-org-update-agenda-file t)) nil 'local)))

;; that's the export function
(defun th-org-update-agenda-file (&optional force)
  (interactive)
  (save-excursion
    (save-window-excursion
      (let ((file "/tmp/org-agenda.txt"))
        (org-agenda-list)
        (org-agenda-write file)))))

;; do it once at startup
(th-org-update-agenda-file t)

;; Calendar settings
;
(setq
  holidays-in-diary-buffer               t
  mark-holidays-in-calendar              t
  all-christian-calendar-holidays        t
  all-islamic-calendar-holidays        nil
  all-hebrew-calendar-holidays         nil
  european-calendar-style                t
  display-time-day-and-date            nil
  calendar-latitude                  55.45
  calendar-longitude                 37.36
  calendar-location-name "Moscow, Russia"
  calendar-week-start-day 1
)

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/tern/emacs")
(autoload 'tern-mode "tern.el" nil t)
(eval-after-load 'tern
   '(progn
      (require 'tern-auto-complete)
      (tern-ac-setup)))

(defun delete-tern-process ()
  (interactive)
  (delete-process "Tern"))

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/flycheck")
(require 'flycheck)

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/helm")
(require 'helm-config)

;; (autoload 'js3-mode "js3-mode" nil t)
(require 'js3-mode)
(add-to-list 'auto-mode-alist '("\\.js$" . js3-mode))
(add-hook 'js3-mode-hook
           (lambda()
             (setq js3-basic-offset 2)
             (setq js3-auto-indent-p t)
             (setq js3-cleanup-whitespace t)
             (setq js3-enter-indents-newline t)
             (setq js3-indent-on-enter-key t)
             (flycheck-mode t)
             (tern-mode t)))

(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-content-type "jsx")
      (let ((web-mode-enable-part-face nil))
        ad-do-it)
    ad-do-it))

(flycheck-define-checker jsxhint-checker
                         "A JSX syntax and style checker based on JSXHint."
                         :command ("jsxhint" source)
                         :error-patterns
                         ((error line-start (1+ nonl) ": line " line ", col " column ", " (message) line-end))
                         :modes (web-mode))

(add-hook 'web-mode-hook
          (lambda ()
            (tern-mode t)
            (auto-complete-mode 1)
            (setq web-mode-markup-indent-offset 2)
            (setq indent-tabs-mode nil)
            (setq web-mode-css-indent-offset 2)
            (setq web-mode-code-indent-offset 2)
            (when (equal web-mode-content-type "jsx")
              ;; enable flycheck
             (flycheck-select-checker 'jsxhint-checker)
             (flycheck-mode))))

(require 'coffee-mode)
(add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
(add-to-list 'auto-mode-alist '("Cakefile" . coffee-mode))
(defun coffee-custom ()
  "coffee-mode-hook"
 (set (make-local-variable 'tab-width) 2))

(add-hook 'coffee-mode-hook
  '(lambda() (coffee-custom)))

(require 'zencoding-mode)
(add-hook 'nxhtml-mode-hook 'zencoding-mode)

(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(autoload 'css-color-mode "css-color" "" t)
(css-color-global-mode t)

(require 'bar-cursor)
(bar-cursor-mode t)

(setq scroll-step 1)
(global-hl-line-mode 1)

(windmove-default-keybindings 'meta)

(set-default-font "Terminus-14")
(add-to-list 'default-frame-alist '(font . "Terminus-14"))

(fringe-mode 1)
(setq-default right-fringe-width 10)
(setq-default left-fringe-width 10)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)

(global-set-key [?\C-,] 'previous-buffer)
(global-set-key [?\C-.] 'next-buffer)

(define-key global-map (kbd "RET") 'newline-and-indent)

(add-to-list 'load-path "~/Dropbox/emacs/.emacs.d/tramp")
(require 'tramp)
(setq tramp-default-method "scp")

(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files" t)
(setq auto-mode-alist (cons '("\\.md" . markdown-mode) auto-mode-alist))

(add-hook 'after-init-hook
          '(lambda () (setq debug-on-error nil)))

;; save a list of open files in ~/.emacs.desktop
;; save the desktop file automatically if it already exists
(setq desktop-save 'if-exists)
(desktop-save-mode 1)

;; save a bunch of variables to the desktop file
;; for lists specify the len of the maximal saved data also
(setq desktop-globals-to-save
      (append '((extended-command-history . 100)
                (file-name-history        . 100)
                (grep-history             . 100)
                (compile-history          . 100)
                (minibuffer-history       . 100)
                (query-replace-history    . 100)
                (read-expression-history  . 100)
                (regexp-history           . 100)
                (regexp-search-ring       . 100)
                (search-ring              . 100)
                (shell-command-history    . 100)
                tags-file-name
                register-alist)))

;; auto save desktop on emacs idle
(add-hook 'auto-save-hook (lambda () (desktop-save-in-desktop-dir)))

;; redefine save to remove Desktop saved in ...
(defun desktop-save-in-desktop-dir ()
  "Save the desktop in directory `desktop-dirname'."
  (interactive)
  (if desktop-dirname
      (desktop-save desktop-dirname)
    (call-interactively 'desktop-save)))

(setq desktop-buffers-not-to-save
      (concat "\\("
              "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
              "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
              "\\)$"))
(add-to-list 'desktop-modes-not-to-save 'dired-mode)
(add-to-list 'desktop-modes-not-to-save 'Info-mode)
(add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
(add-to-list 'desktop-modes-not-to-save 'fundamental-mode)

;;; desktop-override-stale-locks.el begins here
(defun emacs-process-p (pid)
  "If pid is the process ID of an emacs process, return t, else nil.
Also returns nil if pid is nil."
  (when pid
    (let* ((cmdline-file (concat "/proc/" (int-to-string pid) "/cmdline")))
      (when (file-exists-p cmdline-file)
        (with-temp-buffer
          (insert-file-contents-literally cmdline-file)
          (goto-char (point-min))
          (when (search-forward "emacs" nil t)
            pid))))))

(defadvice desktop-owner (after pry-from-cold-dead-hands activate)
  "Don't allow dead emacsen to own the desktop file."
  (when (not (emacs-process-p ad-return-value))
    (setq ad-return-value nil)))

;;
;; alt-shift-arrows
;;
(defun win-resize-top-or-bot ()
"Figure out if the current window is on top, bottom or in the
middle"
(let* ((win-edges (window-edges))
(this-window-y-min (nth 1 win-edges))
(this-window-y-max (nth 3 win-edges))
(fr-height (frame-height)))
(cond
((eq 0 this-window-y-min) "top")
((eq (- fr-height 1) this-window-y-max) "bot")
(t "mid"))))

(defun win-resize-left-or-right ()
"Figure out if the current window is to the left, right or in the
middle"
(let* ((win-edges (window-edges))
(this-window-x-min (nth 0 win-edges))
(this-window-x-max (nth 2 win-edges))
(fr-width (frame-width)))
(cond
((eq 0 this-window-x-min) "left")
((eq (+ fr-width 4) this-window-x-max) "right")
(t "mid"))))

(defun win-resize-enlarge-horiz ()
(interactive)
(cond
((equal "top" (win-resize-top-or-bot)) (enlarge-window -1))
((equal "bot" (win-resize-top-or-bot)) (enlarge-window 1))
((equal "mid" (win-resize-top-or-bot)) (enlarge-window -1))
(t (message "nil"))))

(defun win-resize-minimize-horiz ()
(interactive)
(cond
((equal "top" (win-resize-top-or-bot)) (enlarge-window 1))
((equal "bot" (win-resize-top-or-bot)) (enlarge-window -1))
((equal "mid" (win-resize-top-or-bot)) (enlarge-window 1))
(t (message "nil"))))

(defun win-resize-enlarge-vert ()
(interactive)
(cond
((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally -1))
((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally 1))
((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally -1))))

(defun win-resize-minimize-vert ()
(interactive)
(cond
((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally 1))
((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally -1))
((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally 1))))

(global-set-key [S-M-down] 'win-resize-mi2nimize-vert)
(global-set-key [S-M-up] 'win-resize-enlarge-vert)
(global-set-key [S-M-left] 'win-resize-minimize-horiz)
(global-set-key [S-M-right] 'win-resize-enlarge-horiz)
(global-set-key [S-M-up] 'win-resize-enlarge-horiz)
(global-set-key [S-M-down] 'win-resize-minimize-horiz)
(global-set-key [S-M-left] 'win-resize-enlarge-vert)
(global-set-key [S-M-right] 'win-resize-minimize-vert)

;; Macros
(global-set-key [f2] 'kmacro-call-macro)
(global-set-key [f3] 'kmacro-start-macro-or-insert-counter)
(global-set-key [f4] 'kmacro-end-or-call-macro)

;; dokuwiki
(global-unset-key [(control v)])
(require 'dokuwiki)
(setq dokuwiki-username "pomeo")
(setq dokuwiki-password "fuckyou")
(setq dokuwiki-base-url "wiki.sovechkin.com")

;; Interactively Do Things (highly recommended, but not strictly required)
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)

(defun ido-goto-symbol ()
  "Will update the imenu index and then use ido to select a
   symbol to navigate to"
  (interactive)
  (imenu--make-index-alist)
  (let ((name-and-pos '())
        (symbol-names '()))
    (flet ((addsymbols (symbol-list)
                       (when (listp symbol-list)
                         (dolist (symbol symbol-list)
                           (let ((name nil) (position nil))
                             (cond
                              ((and (listp symbol) (imenu--subalist-p symbol))
                               (addsymbols symbol))
                              ((listp symbol)
                               (setq name (car symbol))
                               (setq position (cdr symbol)))
                              ((stringp symbol)
                               (setq name symbol)
                               (setq position (get-text-property 1 'org-imenu-marker symbol))))
                             (unless (or (null position) (null name))
                               (add-to-list 'symbol-names name)
                               (add-to-list 'name-and-pos (cons name position))))))))
      (addsymbols imenu--index-alist))
    (let* ((selected-symbol (ido-completing-read "Symbol? " symbol-names))
           (position (cdr (assoc selected-symbol name-and-pos))))
      (goto-char position))))

(global-set-key "\C-t" 'ido-goto-symbol)

;; fullscreen
(defun switch-full-screen ()
    (interactive)
    (shell-command "wmctrl -r :ACTIVE: -btoggle,fullscreen"))

(global-set-key [f11] 'switch-full-screen)

(global-set-key [f5] 'compile)
